{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_ref","filter","onChange","react_default","a","createElement","Fragment","value","PersonForm","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","type","Person","person","onDelete","name","number","onClick","Persons","_ref2","persons","map","Persons_Person","key","id","Notification","message","col","Message","styled","div","_templateObject","className","baseUrl","services_persons","axios","get","then","response","data","newObject","post","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setFilter","_useState5","_useState6","setNewName","_useState7","_useState8","setNewNumber","_useState9","_useState10","notification","setNotification","_useState11","_useState12","notificationColor","setNotificationColor","useEffect","personService","initialPersons","console","log","personsToShow","toLowerCase","includes","showNotification","text","setTimeout","components_Notification","components_Filter","event","target","components_PersonForm","preventDefault","existingPersonsWithName","length","returnedPerson","catch","error","window","confirm","existingPerson","changedPerson","p","components_Persons","delperson","returnedResponse","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.687a35fa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Filter = ({ filter, onChange }) => (\n  <>\n    <label>filter shown with</label>\n    <input value={filter} onChange={onChange} />\n  </>\n);\n\nexport default Filter;\n","import React from \"react\";\n\nconst PersonForm = ({\n  newName,\n  newNumber,\n  handleNameChange,\n  handleNumberChange,\n  onSubmit\n}) => (\n  <form onSubmit={onSubmit}>\n    <div>\n      name: <input value={newName} onChange={handleNameChange} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n);\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Person = ({ person, onDelete }) => (\n  <div>\n    {person.name} {person.number} <button onClick={() => onDelete(person)}>delete person</button>\n  </div>\n);\n\nconst Persons = ({ persons, onDelete }) =>\n  persons.map(person => <Person key={person.id} person={person} onDelete={onDelete}/>);\n\nexport default Persons;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Notification = ({ message, col }) => {\n  if (message === null) {\n    return null;\n  }\n\n  const Message = styled.div`\n    position: absolute; \n    bottom: 2%;\n    background: transparent;\n    border-radius: 3px;\n    border: 2px solid ${col || \"palevioletred\"};\n    color: ${col || \"palevioletred\"};\n    margin: 1rem 1em;\n    padding: 0.25em 2em;\n  `;\n\n  return <Message className='error'>{message}</Message>;\n};\n\nexport default Notification;\n","import axios from 'axios';\n\n// run with JSON-server \n// const baseUrl = 'http://localhost:3001/persons';\n\n// run with part3.backend custom node server \n// const baseUrl = 'http://localhost:3001/api/persons';\n\n// run with part3.backend custom node server on heroku externally\n//const baseUrl = 'https://secure-sea-91471.herokuapp.com/api/persons'\n\n// run with part3.backend custom node server on same server - local or heroku \nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteMe = (id) => {\n  const request = axios.delete( `${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deleteMe };","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\nimport personService from './services/persons.js';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [notification, setNotification] = useState(null);\n  const [notificationColor, setNotificationColor] = useState('green');\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      console.log('promise fulfilled!');\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n  const handleFilterChange = event => {\n    setFilter(event.target.value);\n  };\n\n  const personsToShow =\n    filter === ''\n      ? persons\n      : persons.filter(person =>\n          person.name.toLowerCase().includes(filter.toLowerCase())\n        );\n\n  const addPersonHandler = event => {\n    event.preventDefault();\n\n    const existingPersonsWithName = persons.filter(\n      person => person.name === newName\n    );\n\n    // person name does not exist\n    if (existingPersonsWithName.length === 0) {\n      const newPerson = { name: newName, number: newNumber };\n\n      personService.create(newPerson).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n        setNewName('');\n        setNewNumber('');\n\n        showNotification(`added ${returnedPerson.name} to the list`, 'green');\n      }).catch(error => {\n        // this is the way to access the error message\n        console.log(error.response.data)\n        showNotification(`${error.response.data.error}`, 'red');\n      })\n    }\n\n    // person name already exists\n    else {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook. replace old number with a new one?`\n        )\n      ) {\n        const existingPerson = existingPersonsWithName[0];\n\n        const changedPerson = {\n          name: newName,\n          number: newNumber\n        };\n\n        personService\n          .update(existingPerson.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(\n              persons.map(person =>\n                person.id !== existingPerson.id ? person : returnedPerson\n              )\n            );\n            setNewName('');\n            setNewNumber('');\n\n            showNotification(\n              `changed ${returnedPerson.name}'s phone number`,\n              'green'\n            );\n          })\n          .catch(error => {\n            showNotification(\n              `ERROR: ${\n                existingPerson.name\n              } has been deleted and will be removed`,\n              'red'\n            );\n            setPersons(persons.filter(p => p.id !== existingPerson.id));\n\n            setNewName('');\n            setNewNumber('');\n          });\n      }\n    }\n  };\n\n  const deletePerson = delperson => {\n    if (window.confirm(`really delete ${delperson.name}?`)) {\n      console.log(`DELETE ${delperson.id}`);\n      personService.deleteMe(delperson.id).then(returnedResponse => {\n        setPersons(persons.filter(person => person.id !== delperson.id));\n      });\n    }\n  };\n\n  const showNotification = (text, col) => {\n    setNotificationColor(col);\n    setNotification(text);\n    setTimeout(() => {\n      setNotification(null);\n    }, 3000);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} col={notificationColor}/>\n      <Filter filter={filter} onChange={handleFilterChange} />\n      <h3>Add a new</h3>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        onSubmit={addPersonHandler}\n      />\n      <h3>Numbers</h3>\n      <Persons persons={personsToShow} onDelete={deletePerson} />\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}